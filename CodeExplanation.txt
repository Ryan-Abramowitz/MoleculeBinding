Model Training and Predictions:

For every SMILES, we generated the morgon circular fingerprint including chirality of 2048 bits as the feature vector we using RDKIT (1). Kekulizeing a molecule is the act of taking into account the resonenses of various double bonds. When generating the molecule, we set the SanitizeFlags.SANITIZE_KEKULIZE off because we wanted to be able to run the code on some molecules that can not be kekulized (see Substructure Search section).
We made predictions of a whether a molecule binds using the average predicted probabilities of 1000 SGD classifiers using scikit-learn (2) with the settings: loss='modified_huber', penalty='elasticnet', max_iter=1000, class_weight={0: 0.005, 1: 1}, warm_start=True, early_stopping=False. This is a linear model where a positive output means binding and a negative output means not binding. Before  and returns a decimal between 0 (molecule binds) and 1 (molecule does not bind). The predict_proba function was used to calculate the predicted probabilities, which clips the output between -1 and 1 and returns the percent of the from 0 to 1 as the probabiliity. In order to save on computation time, we deleted any features of that were all true or all false (elasticnet penalty already sets the weights of features with 0 variance to 0). We set the class weight of negatives to 0.005 because our training dataset is very unbalanced. Without setting the class weight this way, the model has a strong bies toward predicting molecules as not binding. Using leave 1 sample out cross validation, the model has an accuracy of approximatly 80% on posatives and 85% on negatives. Using class weights of 1 each results in an accuracy of approximatly 15% on posatives and 99% on negatives.

Substruture Search:

In order to determine which parts of the molecule were leading it to it's predictions, we also made a code to assign a number to each atom representing how useful it is in generating a posative prediction given some model. From here on, we will call a submolecule of a molecule, any molecule that can be generated by removing a subset of its nonhydrogen atoms (and the bonds between them and any atom). When generating these submolecules, some are not going to be physically plausable, so RDKit is unable to kekulize them. A posative submolecule is a submolecule that is classified as a hit. The number we assign to each atom is the percent of posative submolecules that the atom could appear in when the submolecule is overlayed on the full molecule. For example, lets say (N-C-C-O) is the molecule and (N-C-C-O), (C-C-O), (N   C-O), (C-O), (C   O), and (C) are the posative submolecules. Then, the scores of the atoms would be (2/6, 4/6, 6/6, 5/6).

Catalog Scoring:

To generate the molecules in our screening library, we took the Santa Cruz Biotech stock list carbohydrates and filtered out any molecules that we could not find the isomeric SMILES for, the molecules that were much heavier than our training dataset, any molecules more expensive than _________$, and any molecules with a prediction less than 0.8.


(1) RDKit: Open-source cheminformatics. https://www.rdkit.org

(2) Scikit-learn: Machine Learning in Python, Pedregosa et al., JMLR 12, pp. 2825-2830, 2011.

